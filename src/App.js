import React, { Component } from "react";
import { hot } from "react-hot-loader";
import Web3 from 'web3';
import "normalize.css";
import "./App.css";
import About from "./Components/Workbench/About.js";
import Accounts from "./Components/Workbench/Accounts.js";
import CompileDeployContract from "./Components/Workbench/CompileDeployContract.js";
import ExecuteContractFunction from "./Components/Workbench/ExecuteContractFunction.js";
import Events from "./Components/Workbench/Events.js";
import FilterOptionsWatch from "./Components/Workbench/FilterOptionsWatch.js";
import LockUnlock from "./Components/Workbench/LockUnlock.js";
import SendTransaction from "./Components/Workbench/SendTransaction.js";
import SetupAndVersion from "./Components/Workbench/SetupAndVersion.js";

class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      // The sample code was compiled in Remix
      // Bytecode / Interface generated by Remix was pasted here
      contract_abidefinition: '[{"constant":false,"inputs":[],"name":"getNum","outputs":[{"name":"n","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"n","type":"uint256"}],"name":"setNum","outputs":[],"payable":false,"type":"function"},{"inputs":[{"name":"x","type":"uint256"}],"payable":false,"type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"caller","type":"address"},{"indexed":true,"name":"oldNum","type":"bytes32"},{"indexed":true,"name":"newNum","type":"bytes32"}],"name":"NumberSetEvent","type":"event"}]',
      contract_bytecode: '0x6060604052341561000c57fe5b604051602080610168833981016040528080519060200190919050505b806000819055505b505b610126806100426000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806367e0badb146044578063cd16ecbf146067575bfe5b3415604b57fe5b60516084565b6040518082815260200191505060405180910390f35b3415606e57fe5b60826004808035906020019091905050608f565b005b600060005490505b90565b60006000549050816000819055506000546001026000191681600102600019163373ffffffffffffffffffffffffffffffffffffffff167f108fd0bf2253f6baf35f111ba80fb5369c2e004b88e36ac8486fcee0c87e61ce60405180905060405180910390a45b50505600a165627a7a72305820b86215323334042910c2707668d7cc3c3ec760d2f5962724042482293eba5f6b0029',
      connectedToEthereum: undefined,
      // Holds the accounts

      // Holds the filter objects
      filterWatch: undefined,
      filterEventCounter: undefined,

      // Holds the contract event object
      contractEvent: undefined,
      contractEventCounter: undefined,



      // If autoRetrieveFlag is true, it will: auto connect, get accounts, set UI components, get balances
      autoRetrieveFlag: true

    }

    this.startApp = this.startApp.bind(this);    
    this.doConnect = this.doConnect.bind(this);
    this.doFilterStopWatching = this.doFilterStopWatching.bind(this);
    this.doContractEventWatchStop = this.doContractEventWatchStop.bind(this);
    this.setData = this.setData.bind(this);


  }

  componentWillMount() {
      // Checking if Web3 has been injected by the browser (Mist/MetaMask)
    if (typeof web3 !== 'undefined') {
      // Use Mist/MetaMask's provider
      window.web3 = new Web3(web3.currentProvider);
    } else {
      console.log('Injected web3 Not Found!!!')
      // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)
      window.web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));
      // var provider = document.getElementById('provider_url');
      // window.web3 = new Web3(new Web3.providers.HttpProvider(provider));
    }

    // Now you can start your app & access web3 freely:
    this.startApp();
  }

  startApp() {
    // If the app is reconnected we should reset the watch
    this.doFilterStopWatching();
    this.doContractEventWatchStop();

    // Set the connect status on the app
    if (web3 && web3.isConnected()) {
      this.setState({ connectedToEthereum: true });

    } else {
      console.log("NOT connected to Ethereum");
        this.setState({ connectedToEthereum: false });
        return;
    }

    // Compilation is available only for TestRPC
    // Geth 1.6 and above does not support compilation
    // MetaMask does not support compilation
    // doGetCompilers();
  }

  

  /**
 * This method is called for connecting to the node
 * The Provider URL is provided in a Document element with the 
 * id = provider_url
 */
   doConnect(providerURL) {
    // Get the provider URL
    window.web3 = new Web3(new Web3.providers.HttpProvider(providerURL));
    this.startApp();
  }

  

  doFilterStopWatching() {
    console.log("called doFilterStopWatching");
  }

  doContractEventWatchStop() {
    console.log("called doContractEventWatchStop");
  }

  setData(docElement, html, errored) {
    console.log(docElement, html, "error:" + errored);  
  }

  render() {
    return (
      <main>
        <About />
        <SetupAndVersion state={this.state} reConnect={this.doConnect}  />
        <Accounts />
        <LockUnlock />
        <SendTransaction />
        <CompileDeployContract />
        <ExecuteContractFunction />
        <FilterOptionsWatch />
        <Events />
    </main>
    );
  }
}

export default hot(module)(App);
